class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
    //-----------------------Brute Approach------------------------

int[] temp=new int[m+n];
int left=0;
int right=0;
int k=0;
while(left<m && right<n)
{
   if(nums1[left]<nums2[right])
{
   temp[k++]=nums1[left++];
}
else if(nums1[left]>nums2[right])
{
  temp[k++]=nums2[right++];
}
else{
temp[k++]=nums1[left++];
right++;
}
}

while(left<m)
{
  temp[k++]=nums1[left++];
}

while(right<n)
{
  temp[k++]=nums2[right++];
}

for(int i=0;i<temp.length;i++)
{
nums1[i]=temp[i];
}



//----------------------------------Optimal Approach--------------------------

int left=m-1;
int right=n-1;
int k=m+n-1;
while(left>=0 && right>=0)
{
   if(nums1[left]>nums2[right])
{
nums1[k--]=nums1[left--];
}
else
{
nums1[k--]=nums2[right--];
}
}


while(left>=0)
{
nums1[k--]=nums1[left--];
}

while(right>=0)
{
nums1[k--]=nums2[right--];
}

 }
}
